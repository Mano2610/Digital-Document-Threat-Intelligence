# -*- coding: utf-8 -*-
"""Copy of Project_Glasswall.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NXLFReVCsLRqGTp22YTH2G4CIW7wPKIz
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
import joblib
from sklearn.model_selection import train_test_split
#from google.colab import drive
#drive.mount('/content/gdrive')

from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score
from sklearn import tree


df = pd.read_csv('D:/New/task_data.csv')

df.query('malicious == "0"')['malicious'].agg(['nunique','count','size'])

df.query('malicious == "1"')['malicious'].agg(['nunique','count','size'])

data=df.malicious.value_counts(sort=0)
labels = 'non-malicious', 'malicious'
plt.figure(figsize=(1.5,1.5), dpi=227)
plt.pie(data, labels=labels, textprops={'fontsize':6}, startangle=0, autopct='%1.1f%%')
plt.show

categoricals = []
for col, col_type in df.dtypes.iteritems():
     if col_type == 'O':
          categoricals.append(col)
     else:
          df[col].fillna(0, inplace=True)

df_ohe = pd.get_dummies(df, columns=categoricals, dummy_na=True)

df_ohe.head()

df.fileType = pd.Categorical(df.fileType).codes

df.isna()

df.dropna()

x = df.drop('malicious', axis=1)
y = df.malicious

X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=27, shuffle=True)

# fit scaler on training data
norm = MinMaxScaler().fit(X_train)

# transform training data
X_train_norm = norm.transform(X_train)

# transform testing dataabs
X_test_norm = norm.transform(X_test)

"""#**Decision Tree :**"""

for i in range(100):
  clf1 = tree.DecisionTreeClassifier()
  clf1.fit(X_train, y_train)
  cv = ShuffleSplit(n_splits=2, test_size=0.2, random_state=0)
  a = cross_val_score(clf1, X_train, y_train, cv=cv)

joblib.dump(clf1, 'model.pkl')

clf1 = joblib.load('model.pkl')

model_columns = list(x.columns)
joblib.dump(model_columns, 'model_columns.pkl')
print("Models columns dumped!")